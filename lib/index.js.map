{"version":3,"file":"index.js","sources":["../src/dragging.js","../src/utils.js"],"sourcesContent":["/**\r\n * Reorders items within a list.\r\n *\r\n * @param {Object} list - The list to be reordered.\r\n * @param {number} startIndex - The starting index of the item.\r\n * @param {number} endIndex - The ending index of the item.\r\n * @returns {Object} - The reordered list.\r\n */\r\nexport const reorder = (list, startIndex, endIndex) => {\r\n    // Create a shallow copy of the list to avoid mutation\r\n    const result = { ...list };\r\n\r\n    // Remove the item from the original position\r\n    const [removed] = result.content.splice(startIndex, 1);\r\n\r\n    // Insert the item at the new position\r\n    result.content.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n *\r\n * @param {Object} source - The source list.\r\n * @param {Object} destination - The destination list.\r\n * @param {Object} droppableSource - Information about the source droppable.\r\n * @param {Object} droppableDestination - Information about the destination droppable.\r\n * @returns {Object} - Object containing the updated lists and the removed item.\r\n */\r\nexport const move = (source, destination, droppableSource, droppableDestination) => {\r\n    // Create shallow copies of source and destination to avoid mutation\r\n    const sourceClone = { ...source };\r\n    const destClone = { ...destination };\r\n\r\n    // Remove the item from the source list\r\n    const [removed] = sourceClone.content.splice(droppableSource.index, 1);\r\n\r\n    // Insert the item into the destination list at the specified index\r\n    destClone.content.splice(droppableDestination.index, 0, removed);\r\n\r\n    // Create an object representing the result with updated lists\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return { result, removed };\r\n};\r\n\r\n/**\r\n * Initializes items with unique IDs based on the provided occurrences.\r\n *\r\n * @param {Array} items - The array of items to initialize.\r\n * @returns {Array} - The array of initialized items with unique IDs.\r\n */\r\nexport const initItems = (items) =>\r\n    items.map((occurrence, index) => ({\r\n        id: `item-${index}-${new Date().getTime()}`,\r\n        content: occurrence\r\n    }));\r\n\r\n/**\r\n * Initializes groups with unique IDs based on the provided groups.\r\n *\r\n * @param {Array} groups - The array of groups to initialize.\r\n * @returns {Array} - The array of initialized groups with unique IDs and empty content arrays.\r\n */\r\nexport const initGroups = (groups) =>\r\n    groups.map((group, index) => ({\r\n        ...group,\r\n        id: `group-${index}-${new Date().getTime()}`,\r\n        content: []\r\n    }));\r\n","import _ from 'lodash';\r\n\r\n/**\r\n * Generates a random string of a specified length.\r\n *\r\n * @param {number} length - The length of the random string.\r\n * @returns {string} - A random string.\r\n */\r\nexport function generateRandomString(length = 8) {\r\n    /**\r\n     * Initialize the random string.\r\n     */\r\n    let result = \"\";\r\n\r\n    /**\r\n     * Create an array of all allowed characters.\r\n     */\r\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    /**\r\n     * Get the length of the characters array.\r\n     */\r\n    const charactersLength = characters.length;\r\n\r\n    /**\r\n     * Initialize a counter.\r\n     */\r\n    let counter = 0;\r\n\r\n    /**\r\n     * Generate the random string.\r\n     */\r\n    while (counter < length) {\r\n        // Generate a random index in the characters array.\r\n        const randomIndex = Math.floor(Math.random() * charactersLength);\r\n\r\n        // Add the character at the random index to the random string.\r\n        result += characters.charAt(randomIndex);\r\n\r\n        // Increment the counter.\r\n        counter += 1;\r\n    }\r\n\r\n    /**\r\n     * Return the random string.\r\n     */\r\n    return result;\r\n}\r\n"],"names":["reorder","list","startIndex","endIndex","result","removed","content","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","initItems","items","map","occurrence","id","Date","getTime","initGroups","groups","group","generateRandomString","length","characters","charactersLength","counter","randomIndex","Math","floor","random","charAt"],"mappings":"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"};"}